// 1. Create a new MongoDB database called employment.
use employment
db;

// 2. Insert a new record for Wendy Yasquez into the database and into a collection called employees.
db.employee.insert({
    _id: 1,
    Name: "Wendy Yasquez",
    Title: "Assistant Professor",
    Salary: 86000,
    Department: "Computer Science",
    Hire_Year:1998
});

db.employee.find();

//3. Write a JavaScript function to insert new professors into the employees collection.
function insertEmployee(id, name, title, salary, department,  hire_year){
    
    db.employee.insert({
    _id:id,
    Name: name,
    Title: title,
    Salary: salary,
    Department: department,
    Hire_Year:hire_year
})
};

//4. Use this function to insert the records for Raoul Dewan, Isabelle Winters, and Jack McDunn.
insertEmployee(2, "Raoul Dewan", "Assistant Professor", 78000, ["Physics", "Biology"],  2009);
insertEmployee(3, "Isabelle Winters", "Assistant Professor", 92000, ["Physics"],  1995);
insertEmployee(4, "Jack McDunn", "Assistant Professor", 101000, ["Physics"],  1993);


//5. Write a JavaScript function to insert new administrative employees into the employees collection.
function insertAdminEmployee(id, name, title, salary, division, location, hire_year){
    
    db.employee.insert({
    _id:id,
    Name: name,
    Title: title,
    Salary: salary,
    Division: division,
    Location: location,
    Hire_Year:hire_year
})
};


//6. Use this function to insert the records for Tonja Baldner and Dennis Bohnet.
insertAdminEmployee(5, "Tonja Baldner", "Assistant to the Dean", 42000, "Arts and Sciences", null,  2001);
insertAdminEmployee(6, "Dennis Bohnet", "Vice President", 106500, "Academic Affairs", "Main Campus", 1997);

//7. Show the code that will return all employees with salaries less than $90,000.
db.employee.find(
    {Salary:{$lt:90000.000000}}
    );
    
//8. Show the code that will return all professors with salaries less than $90,000.
db.employee.find(
    {$and: [{Department:{$ne:null}}, {Salary:{$lt:90000.000000}}]}
    );
    
//9. Show the code that will return all Physics professors hired before 2001.
 db.employee.find(
    {$and: [{Department:"Physics"}, {Hire_Year:{$lt:2001}}]}
    ) ;
    
//10. Show the code that will return all professors who teach for departments other than Physics. (This should include professors who teach for Physics and also other departments.)
 db.employee.find(
    {$and: [{Department:{$ne:null}}, {Department:{$regex : "[^Physics]"}}]}
    ) ;

//11. Show the code that will return all employees who were either hired before 1997 or who have salaries greater than $100,000.
db.employee.find( 
    {$or:[{Hire_Year:{$lt:1997}}, {Salary:{$gt:1000000}}]}
);
    
//12. Suppose Tonja Baldner has been given a 10% raise. Show the code that will update her salary correctly.
db.employee.update({Name: 'Tonja Baldner'}, {$mul: {Salary: 1.1}})

//13. Professor Dewan has been offered a job at another university. Show the code that would remove his record from the database.
db.employee.remove(
    { Name : 'Raoul Dewan' }
    );    


//14. Instead of removing Professor Dewan’s record, we might prefer to create a new collection called pastemployees and move his record there. Show the code that will move his record to the new collection and add a departyear value of 2014 to his record. (You can do it in two steps.)    
db.employee.find({Name:"Raoul Dewan"}).forEach(function(x){db.pastemployees.insert(x)});
db.employee.remove(
    { Name : 'Raoul Dewan' }
    );
    
db.pastemployees.find();
db.employee.find();